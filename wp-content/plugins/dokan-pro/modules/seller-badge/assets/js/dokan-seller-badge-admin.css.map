{"version":3,"file":"../../modules/seller-badge/assets/js/dokan-seller-badge-admin.css","mappingsgfA;IACA;AAEA;QACA;AACA;AAEA;QACA;QACA;QACA;QACA;QACA;QACA;AAEA;YACA;YACA;AACA;AAEA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;AACA;AAEA;YACA;YACA;YACA;AACA;AAEA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;eAAA;oBAAA;YACA;YACA;AACA;AAEA;YACA;YACA;YACA;YACA;AACA;AAEA;YACA;YACA;YACA;YACA;YACA;AACA;AAEA;YACA;AACA;AACA;YACA;AACA;AACA;YACA;AACA;AACA;YACA;AACA;AACA;YACA;AACA;AACA;YACA;AACA;AACA;YACA;AACA;AACA;YACA;AACA;AACA;YACA;AACA;AACA;AACA;AAEA;EACA;AACA","sources":["webpack://dokan-pro/./modules/seller-badge/assets/src/admin/pages/NewSellerBadge.vue"],"sourcesContent":["<template>\n    <div class=\"dokan-seller-badge-form-wrapper\">\n        <h1 class=\"wp-heading-inline\">{{ pageTitle }}</h1>\n        <div class=\"docs_and_videos\">\n            <a v-if=\"getDocURL()\" :href=\"getDocURL()\" target=\"_blank\" class=\"docs_and_videos_title docs\"><i class=\"fas fa-file-alt\"></i> {{ __('Docs', 'dokan') }}</a>\n            <a href=\"#\" @click.prevent=\"toggleVideoPopup\" class=\"docs_and_videos_title\" v-if=\"getVideoID()\">\n                <i class=\"fas fa-play-circle\"></i>{{ __('Videos', 'dokan') }}\n            </a>\n        </div>\n\n        <transition name=\"fade\">\n            <VideoPopup @toggle=\"toggleVideoPopup\" :videoId=\"getVideoID()\" v-if=\"showVideoPopup\"></VideoPopup>\n        </transition>\n\n        <hr class=\"wp-header-end\">\n\n        <form action=\"\" method=\"post\" id=\"post\">\n            <div id=\"poststuff\">\n                <div id=\"post-body\" class=\"metabox-holder columns-2\">\n                    <div>\n                        <div class=\"post-body-content postbox dokan-postbox badge__event-box\" :class=\"checkRtl\">\n                            <div id=\"titlediv\">\n                                <BadgeEvents />\n                                <div id=\"titlewrap\">\n                                    <h3>{{ this.__( 'Badge Name', 'dokan' ) }}</h3>\n                                    <input type=\"text\" v-model=\"badge.badge_name\" name=\"post_title\" size=\"30\" id=\"title\" autocomplete=\"off\" :placeholder=\"__('e.g. Best Seller', 'dokan')\" required=\"required\" :disabled=\"!badge.event_type\">\n                                </div>\n                            </div>\n                            <div v-if=\"badge.event_type\" class=\"badge-description\">\n                                <i class=\"info-icon\"></i>\n                                <p>{{ badge.event.description }}</p>\n                            </div>\n                        </div>\n\n                        <div class=\"post-body-content badge__condition-box postbox dokan-postbox\" :class=\"checkRtl\">\n                            <div id=\"postbox-container-2\">\n                                <div id=\"postdivrich\" class=\"postarea wp-editor-expand\">\n                                    <div>\n                                        <h3 class='mb-4 font-bold text-[1rem]'>{{ __('Condition & Level', 'dokan') }}</h3>\n                                        <KeepAlive>\n                                            <component\n                                                :is=\"currentComponent\"\n                                                :event=\"badge.event\"\n                                                :key=\"badge.event.id ?? badge.event.id\" />\n                                        </KeepAlive>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div>\n                        <div id=\"postbox-container-1\" class=\"postbox-container postbox dokan-postbox\">\n                            <h1 class=\"badge_photo\">{{ __('Badge Photo', 'dokan') }}</h1>\n                            <template v-if=\"this.badge.event_type\">\n                                <p class='mb-3'> {{__('Click below image to edit or update badge image or ', 'dokan')}} <a href=\"#\" @click.prevent=\"restoreDefaultImage()\">{{ __( 'restore default.', 'dokan' ) }}</a></p>\n                                <div class=\"seller-badge-img\">\n                                    <UploadImage\n                                        :croppingWidth=60\n                                        :croppingHeight=65\n                                        :src=\"this.badge.badge_logo\"\n                                        @uploadedImage=\"uploadedImage\"\n                                        :showButton=\"false\"\n                                    />\n                                </div>\n                                <p class='mt-3'>{{ __( 'Recommended image size 60X65 pixel, JPG, PNG or SVG.', 'dokan' ) }}</p>\n                            </template>\n                            <template v-else>\n                                <p class='mb-3'>{{ __('Badge photo will be appeared here after selecting a badge event.', 'dokan') }}</p>\n                                <img :src=\"this.badge.badge_logo\" />\n                            </template>\n                        </div>\n\n                        <div id=\"postbox-container-1\" class=\"postbox-container postbox dokan-postbox postbox-status\">\n                            <div>\n                                <h1>{{ __('Status', 'dokan') }}</h1>\n                                <select style=\"min-width: 100%\" v-model=\"badge.badge_status\" name=\"badge_status\" id=\"status\" class=\"dokan-form-control\">\n                                    <option value=\"published\">{{ __('Published', 'dokan') }}</option>\n                                    <option value=\"draft\">{{ __('Draft', 'dokan') }}</option>\n                                </select>\n                            </div>\n                            <div class=\"pull-right margin-top-2x\">\n                                <button type=\"submit\" class=\"button button-secondary button-large\" @click.prevent=\"$router.push({name: 'SellerBadgeList'})\">{{ __('Go Back', 'dokan') }}</button>\n                                <button type=\"submit\" class=\"button button-primary button-large\" @click.prevent=\"saveBadgeData()\" :disabled=\"disableAddNewButton()\">{{ save_button }}</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <br class=\"clear\">\n            </div>\n        </form>\n        <LoaderModal v-if=\"loadSpinner\" />\n    </div>\n</template>\n\n<script>\nconst apiBase     = 'seller-badge';\nconst Postbox     = dokan_get_lib('Postbox');\nconst UploadImage = dokan_get_lib('UploadImage');\n\nimport BadgeEvents      from \"../components/BadgeEvents.vue\";\nimport DummyLevels      from \"../components/BadgeLevels/DummyLevels.vue\";\nimport LogicalComponent from '../components/BadgeLevels/LogicalComponent.vue';\nimport TrendingProduct  from '../components/BadgeLevels/TrendingProduct.vue';\nimport VerifiedSeller   from '../components/BadgeLevels/VerifiedSeller.vue';\nimport NoLevels         from \"../components/BadgeLevels/NoLevels.vue\";\nimport LoaderModal      from \"../../components/LoaderModal.vue\";\nimport defaultBadgeData from \"../../BadgeSingle.json\";\nimport mixin            from \"../../Mixin.js\";\nimport VideoPopup       from '../../../../../../src/admin/components/Modules/VideoPopup.vue';\n\nimport editBadgeIcon        from '../../../images/popup/update-badge.svg';\nimport editBadgeSuccessIcon from '../../../images/popup/badge-success.svg';\nimport defaultBadgeLogo     from '../../../images/popup/default-badge.svg';\n\nexport default {\n    name: 'NewSellerBadge',\n    mixins: [mixin],\n    components: {\n        BadgeEvents,\n        DummyLevels,\n        LogicalComponent,\n        NoLevels,\n        Postbox,\n        TrendingProduct,\n        UploadImage,\n        VerifiedSeller,\n        LoaderModal,\n        VideoPopup,\n        defaultBadgeData,\n        editBadgeIcon,\n        editBadgeSuccessIcon,\n        defaultBadgeLogo,\n    },\n    data () {\n        return {\n            resetButton: false,\n            originalLogo: '',\n            save_button: this.__('Create', 'dokan'),\n            loadSpinner: false,\n            pageTitle: this.__('Creating New badge', 'dokan'),\n            default_badge_icon: defaultBadgeLogo,\n            badge: Object.assign( {}, this.getdefaultBadgeData() ),\n            currentComponent: 'DummyLevels',\n            showVideoPopup: false,\n            responsibleComponents: {\n                product_published: 'LogicalComponent',\n                sale_amount: 'LogicalComponent',\n                customer_review: 'LogicalComponent',\n                number_of_items_sold: 'LogicalComponent',\n                number_of_orders: 'LogicalComponent',\n                store_support_count: 'LogicalComponent',\n                trending_product: 'TrendingProduct',\n                verified_seller: 'VerifiedSeller',\n            },\n        }\n    },\n\n    provide() {\n        // use function syntax so that we can access `this`\n        return {\n            getSelectedBadge: this.getSelectedBadge,\n            getBadgeEvent:    this.getBadgeEvent,\n            setBadgeEvent:    this.setBadgeEvent,\n            getBadgeLevels:   this.getBadgeLevels,\n            setBadgeLevels:   this.setBadgeLevels,\n        }\n    },\n\n    methods: {\n        // provide method\n        getSelectedBadge() {\n            return this.badge;\n        },\n\n        /**\n         * provide method: get selected badge event\n         *\n         * @returns defaultBadgeData.event\n         */\n        getBadgeEvent() {\n            return this.badge.event;\n        },\n\n        // provide method\n        setBadgeEvent( badge_event, badge_data = {} ) {\n            this.badge.event = badge_event;\n\n            // set badge data\n            this.badge.badge_name = badge_data.badge_name ?? badge_event.title;\n            this.badge.badge_logo = badge_data.badge_logo ?? badge_event.badge_logo;\n            this.badge.badge_logo_raw = badge_data.badge_logo_raw ?? badge_event.badge_logo_raw;\n            this.badge.event_type = badge_event.id;\n\n            this.currentComponent = undefined === this.responsibleComponents[ badge_event.id ] ? 'NoLevels' : this.responsibleComponents[ badge_event.id ];\n        },\n\n        // provide method\n        getBadgeLevels() {\n            return this.badge.levels;\n        },\n\n        // provide method\n        setBadgeLevels( badge_levels ) {\n            if ( ! Array.isArray( badge_levels ) || ! badge_levels.length ) {\n                this.badge.levels = [];\n            } else {\n                this.badge.levels = badge_levels;\n            }\n        },\n\n        getdefaultBadgeData() {\n            defaultBadgeData.badge_logo = defaultBadgeLogo;\n            return defaultBadgeData;\n        },\n\n        fetchABadge (badge_id) {\n            const self = this;\n            self.loadSpinner = true\n            dokan.api.get(`/seller-badge/${badge_id}`)\n            .done( (response) => {\n                self.badge = response;\n                self.setBadgeEvent( self.badge.event, response );\n            }).always( () => {\n                self.loadSpinner = false;\n            } ).fail( ( jqXHR ) => {\n                self.badge = defaultBadgeData;\n                let message = dokan_handle_ajax_error( jqXHR );\n                if ( message ) {\n                    self.showErrorAlert( message );\n                }\n            } );\n        },\n\n        saveBadgeData() {\n            if ( this.badge.id ) {\n                this.updateBadge();\n            } else {\n                // create new badge\n                this.createBadge();\n            }\n        },\n\n        createBadge () {\n            let self = this;\n            // validate badge name\n            if ( ! self.badge.badge_name ) {\n                self.showErrorAlert( self.__( 'Please enter a valid badge name.', 'dokan' ) );\n                return;\n            }\n\n            // validate event tyoe\n            if ( ! self.badge.event_type ) {\n                self.showErrorAlert( self.__( 'Please select a valid badge event.', 'dokan' ) );\n                return;\n            }\n\n            self.loadSpinner = true;\n            dokan.api.post('/seller-badge/', self.badge)\n            .done( ( response ) => {\n                self.getSwal().fire({\n                    imageUrl: editBadgeSuccessIcon,\n                    title: self.__( 'Badge Added Successfully.', 'dokan' ),\n                });\n                self.$router.push({\n                    name: 'SellerBadgeList',\n                });\n            }).always( () => {\n                self.loadSpinner = false;\n            }).fail( ( jqXHR ) => {\n                self.badges = {};\n                let message = dokan_handle_ajax_error( jqXHR );\n                if ( message ) {\n                    self.showErrorAlert( message );\n                }\n            });\n        },\n\n        updateBadge() {\n            const self = this;\n            //self.loadSpinner = true\n\n            let swal_options = {\n                title: this.__( 'Update Badge', 'dokan' ),\n                text: this.__( 'Are you sure you want to update badge data? Note that, this action will update all existing vendor badges.', 'dokan' ),\n                imageUrl: editBadgeIcon,\n                width: 600,\n                showCloseButton: true,\n                showCancelButton: true,\n                cancelButtonText: this.__( 'No, Cancel', 'dokan' ),\n                confirmButtonText: this.__( 'Yes, Update', 'dokan' ),\n                confirmButtonColor: '#1A9ED4',\n                showLoaderOnConfirm: true,\n            };\n\n            this.getSwal().fire( {\n                ...swal_options,\n                preConfirm: () => {\n                    return dokan.api.put('/seller-badge/' + this.badge.id, this.badge)\n                        .done( ( response ) => {\n                            return response;\n                        }).always( () => {\n                        self.loadSpinner = false;\n                    }).catch( (jqXHR) => {\n                            let message = dokan_handle_ajax_error( jqXHR );\n                            if ( message ) {\n                                self.showErrorAlert( message );\n                            }\n                            return false;\n                    });\n                },\n                allowOutsideClick: () => !this.getSwal().isLoading(),\n                backdrop: true,\n            } ).then( ( result ) => {\n                // show success message\n                if (result.isConfirmed) {\n                    self.getSwal().fire({\n                        imageUrl: editBadgeSuccessIcon,\n                        title: self.__( 'Badge Updated Successfully.', 'dokan' ),\n                    });\n                    self.$router.push({\n                        name: 'SellerBadgeList',\n                    });\n                } else {\n                    this.loadSpinner = false;\n                }\n            });\n        },\n\n        uploadedImage (image) {\n            this.badge.badge_logo = image.src;\n            this.badge.badge_logo_raw = image.id;\n        },\n\n        restoreDefaultImage() {\n            this.badge.badge_logo = this.badge.default_logo;\n            this.badge.badge_logo_raw = this.badge.default_logo;\n            this.$root.$emit('resetDokanUploadImage', {src: this.badge.formatted_default_logo});\n        },\n\n        disableAddNewButton() {\n            if ( this.loadSpinner ) {\n                return true;\n            }\n            return !(this.badge.badge_name && this.badge.event_type);\n\n        },\n\n        toggleVideoPopup() {\n            this.showVideoPopup = ! this.showVideoPopup;\n        },\n\n        getDocURL() {\n            return 'https://dokan.co/docs/wordpress/modules/seller-badge/';\n        },\n\n        getVideoID() {\n            return '';\n        }\n    },\n    computed: {\n        checkRtl () {\n            return isRtl === 1 && isRtl !== undefined ? 'lang_rtl' : ''\n        },\n    },\n    created () {\n        defaultBadgeData.badge_logo = this.default_badge_icon;\n        if (this.$route.params.id) {\n            this.pageTitle = this.__('Editing Badge', 'dokan');\n            this.save_button = this.__('Update', 'dokan');\n            this.fetchABadge(this.$route.params.id);\n        }\n    },\n    mounted() {\n\n    }\n}\n</script>\n\n<style lang=\"less\" scoped>\n.dokan-seller-badge-form-wrapper {\n    .docs_and_videos {\n        display: flex;\n        gap: 20px;\n\n        a {\n            color: #788383;\n            font-size: 0.8125rem;\n            display: flex;\n            align-items: center;\n            gap: 7px;\n            text-decoration: none;\n        }\n    }\n\n    h1.badge_photo {\n        display: block !important;\n    }\n\n    #post-body {\n        display: grid;\n        grid-template-columns: 1fr 346px;\n        column-gap: 20px;\n        width: 100%;\n\n        @media (max-width: 776px) {\n            grid-template-columns: 1fr;\n        }\n\n        .postbox {\n            border: 1px solid #E2E2E2;\n            padding: 25px;\n            width: 100% !important;\n        }\n\n        > div:nth-child(2) {\n            display: grid;\n            height: fit-content;\n        }\n\n        div.badge-description {\n            .info-icon {\n                background: url('../../../images/others/info.svg') no-repeat center;\n                width: 17px;\n                height: 17px;\n                line-height: 17px;\n                display: inline-block;\n                vertical-align: middle;\n            }\n            p {\n                display: inline-block;\n                margin-left: 6px;\n                font-weight: 400;\n                font-size: 0.75rem;\n                line-height: 17px;\n                vertical-align: middle;\n                color: #575D64;\n            }\n        }\n    }\n\n    #titlediv {\n        display: flex;\n        flex-flow: row wrap;\n        gap: 20px;\n\n        @media (max-width: 767px) {\n            flex-direction: column;\n        }\n\n        > div {\n            flex: 1;\n\n            @media (max-width: 767px) {\n                width: 100%;\n            }\n        }\n\n        h3 {\n            margin: 0 0 0.625em;\n        }\n    }\n\n    #title,\n    #status {\n        border: 1px solid #E2E2E2;\n        border-radius: 3px;\n        height: 42px !important;\n        font-size: 15px !important;\n    }\n\n    #titlediv h3,\n    .postbox-status h1,\n    .badge_photo {\n        font-size: 1rem;\n        font-weight: 700;\n        padding: 0;\n        margin: 0 0 0.625em;\n    }\n\n    .badge_photo + p {\n        margin-top: 0;\n    }\n\n    .pull-right {\n        display: flex;\n        justify-content: end;\n        gap: 10px;\n        margin-top: 20px;\n    }\n}\n.lang_rtl {\n    float: right !important;\n}\n</style>\n<style>\n.dokan-seller-badge-form-wrapper {\n    font-family: \"SF Pro Text\", sans-serif;\n\n    * {\n        box-sizing: border-box;\n    }\n\n    .input-group {\n        position: relative;\n        display: flex;\n        flex-wrap: nowrap;\n        align-items: stretch;\n        border-top-right-radius: 0;\n        border-bottom-right-radius: 0;\n\n        &:not(.has-validation) > :not(:last-child) {\n            border-top-right-radius: 0;\n            border-bottom-right-radius: 0;\n        }\n\n        .input-group-text {\n            display: flex;\n            align-items: center;\n            padding: .375rem .75rem;\n            font-size: 1rem;\n            font-weight: 400;\n            line-height: 1.5;\n            color: #212529;\n            text-align: center;\n            white-space: nowrap;\n            background-color: #f5f5f5;\n            border: 1px solid #e2e2e2;\n            border-radius: .375rem;\n        }\n\n        &> :not(:first-child):not(.dropdown-menu):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback) {\n            margin-left: calc(1px * -1);\n            border-top-left-radius: 0;\n            border-bottom-left-radius: 0;\n        }\n\n        .form-control {\n            display: block;\n            padding: .375rem .75rem;\n            font-size: 1rem;\n            font-weight: 400;\n            line-height: 1.5;\n            color: #424242;\n            background-color: #ffffff;\n            background-clip: padding-box;\n            border: 1px solid #e2e2e2;\n            appearance: none;\n            border-radius: 0.375rem;\n            transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;\n        }\n\n        button, input, optgroup, select, textarea {\n            margin: 0;\n            font-family: inherit;\n            font-size: inherit;\n            line-height: inherit;\n        }\n\n        .icon {\n            width: 17px;\n            height: 17px;\n            line-height: 17px;\n            display: inline-block;\n            vertical-align: middle;\n        }\n\n        .icon-compare {\n            background: url('../../../images/input-group-icons/compare.svg') no-repeat center;\n        }\n        .icon-count {\n            background: url('../../../images/input-group-icons/count.svg') no-repeat center;\n        }\n        .icon-order {\n            background: url('../../../images/input-group-icons/order.svg') no-repeat center;\n        }\n        .icon-price {\n            background: url('../../../images/input-group-icons/price.svg') no-repeat center;\n        }\n        .icon-review {\n            background: url('../../../images/input-group-icons/review.svg') no-repeat center;\n        }\n        .icon-timing {\n            background: url('../../../images/input-group-icons/timing.svg') no-repeat center;\n        }\n        .icon-trending {\n            background: url('../../../images/input-group-icons/trending.svg') no-repeat center;\n        }\n        .icon-document {\n            background: url('../../../images/input-group-icons/document.svg') no-repeat center;\n        }\n        .icon-support {\n            background: url('../../../images/input-group-icons/support.svg') no-repeat center;\n        }\n    }\n}\n\n.seller-badge-img {\n  max-width: 60px;\n}\n</style>\n"],"names":[],"sourceRoot":""}